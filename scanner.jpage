
Anáise Léxica de MiniJava
==========================

Escreva um analisador léxico para
a linguagem MiniJava (http://www.dcc.ufrj.br/~fabiom/comp/minijava.html).
Para facilitar, a pasta `minijava` contém o esqueleto de um analisador
escrito usando o JFlex (http://jflex.de) que vocês podem apenas
completar e testar. O esqueleto está no arquivo `minijava.jflex`.

Vocês devem usar a classe Token para retornar os tokens necessários,
leiam os tipos que estão definidos na interface Tokens com atenção.

Bolar uma estratégia de testes para o analisador léxico também
é responsabilidade de vocês. Para facilitar estou fornecendo o
código Java do meu analisador (Scanner.java), que vocês podem
executar em casos de teste e comparar a saída dele com o do
seu analisador. Nem tentem fazer "engenharia reversa" do
Scanner.java para chegar na especificação, vai ser um esforço
maior do que escrever a especificação do zero.

Abaixo estão trechos de código que executam o analisador em
alguns casos de teste:

java.io.FileReader f = new java.io.FileReader("factorial.java");
minijava.Scanner scan = new minijava.Scanner(f);
for(minijava.Token tok: scan.tokens()) 
	System.out.println(tok);
/* Saída:
(class,1,1)
(id,Factorial,1,7)
({,1,16)
(public,2,5)
(static,2,12)
(void,2,19)
(main,2,24)
((,2,28)
(String,2,29)
([,2,35)
(],2,36)
(id,a,2,38)
(),2,39)
({,2,40)
(System.out.println,3,2)
((,3,20)
(new,3,21)
(id,Fac,3,25)
((,3,28)
(),3,29)
(.,3,30)
(id,ComputeFac,3,31)
((,3,41)
(num,10,3,42)
(),3,44)
(),3,45)
(;,3,46)
(},4,5)
(},5,1)
(class,7,1)
(id,Fac,7,7)
({,7,11)
(public,9,5)
(int,9,12)
(id,ComputeFac,9,16)
((,9,26)
(int,9,27)
(id,num,9,31)
(),9,34)
({,9,35)
(int,10,2)
(id,num_aux,10,6)
(;,10,14)
(if,11,2)
((,11,5)
(id,num,11,6)
(<,11,10)
(num,1,11,12)
(),11,13)
(id,num_aux,12,6)
(=,12,14)
(num,1,12,16)
(;,12,18)
(else,13,2)
(id,num_aux,14,6)
(=,14,14)
(id,num,14,16)
(*,14,20)
((,14,22)
(this,14,23)
(.,14,27)
(id,ComputeFac,14,28)
((,14,38)
(id,num,14,39)
(-,14,42)
(num,1,14,43)
(),14,44)
(),14,45)
(;,14,47)
(return,15,2)
(id,num_aux,15,9)
(;,15,17)
(},16,5)
(},18,1)
(<<EOF>>,19,1)
*/

java.io.FileReader f = new java.io.FileReader("binarysearch.java");
minijava.Scanner scan = new minijava.Scanner(f);
for(minijava.Token tok: scan.tokens()) 
	System.out.println(tok);
/* Saída:
(class,1,1)
(id,BinarySearch,1,7)
({,1,19)
(public,2,5)
(static,2,12)
(void,2,19)
(main,2,24)
((,2,28)
(String,2,29)
([,2,35)
(],2,36)
(id,a,2,38)
(),2,39)
({,2,40)
(System.out.println,3,2)
((,3,20)
(new,3,21)
(id,BS,3,25)
((,3,27)
(),3,28)
(.,3,29)
(id,Start,3,30)
((,3,35)
(num,20,3,36)
(),3,38)
(),3,39)
(;,3,40)
(},4,5)
(},5,1)
(class,10,1)
(id,BS,10,7)
({,10,9)
(int,11,5)
([,11,8)
(],11,9)
(id,number,11,11)
(;,11,18)
(int,12,5)
(id,size,12,9)
(;,12,14)
(public,16,5)
(int,16,12)
(id,Start,16,16)
((,16,21)
(int,16,22)
(id,sz,16,26)
(),16,28)
({,16,29)
(int,17,2)
(id,aux01,17,6)
(;,17,12)
(int,18,2)
(id,aux02,18,6)
(;,18,12)
(id,aux01,19,2)
(=,19,8)
(this,19,10)
(.,19,14)
(id,Init,19,15)
((,19,19)
(id,sz,19,20)
(),19,22)
(;,19,23)
(id,aux02,20,2)
(=,20,8)
(this,20,10)
(.,20,14)
(id,Print,20,15)
((,20,20)
(),20,21)
(;,20,22)
(if,21,2)
((,21,5)
(this,21,6)
(.,21,10)
(id,Search,21,11)
((,21,17)
(num,8,21,18)
(),21,19)
(),21,20)
(System.out.println,21,22)
((,21,40)
(num,1,21,41)
(),21,42)
(;,21,44)
(else,22,2)
(System.out.println,22,7)
((,22,25)
(num,0,22,26)
(),22,27)
(;,22,29)
(if,23,2)
((,23,5)
(this,23,6)
(.,23,10)
(id,Search,23,11)
((,23,17)
(num,19,23,18)
(),23,20)
(),23,21)
(System.out.println,23,23)
((,23,41)
(num,1,23,42)
(),23,43)
(;,23,45)
(else,24,2)
(System.out.println,24,7)
((,24,25)
(num,0,24,26)
(),24,27)
(;,24,29)
(if,25,2)
((,25,5)
(this,25,6)
(.,25,10)
(id,Search,25,11)
((,25,17)
(num,20,25,18)
(),25,20)
(),25,21)
(System.out.println,25,23)
((,25,41)
(num,1,25,42)
(),25,43)
(;,25,45)
(else,26,2)
(System.out.println,26,7)
((,26,25)
(num,0,26,26)
(),26,27)
(;,26,29)
(if,27,2)
((,27,5)
(this,27,6)
(.,27,10)
(id,Search,27,11)
((,27,17)
(num,21,27,18)
(),27,20)
(),27,21)
(System.out.println,27,23)
((,27,41)
(num,1,27,42)
(),27,43)
(;,27,45)
(else,28,2)
(System.out.println,28,7)
((,28,25)
(num,0,28,26)
(),28,27)
(;,28,29)
(if,29,2)
((,29,5)
(this,29,6)
(.,29,10)
(id,Search,29,11)
((,29,17)
(num,37,29,18)
(),29,20)
(),29,21)
(System.out.println,29,23)
((,29,41)
(num,1,29,42)
(),29,43)
(;,29,45)
(else,30,2)
(System.out.println,30,7)
((,30,25)
(num,0,30,26)
(),30,27)
(;,30,29)
(if,31,2)
((,31,5)
(this,31,6)
(.,31,10)
(id,Search,31,11)
((,31,17)
(num,38,31,18)
(),31,20)
(),31,21)
(System.out.println,31,23)
((,31,41)
(num,1,31,42)
(),31,43)
(;,31,45)
(else,32,2)
(System.out.println,32,7)
((,32,25)
(num,0,32,26)
(),32,27)
(;,32,29)
(if,33,2)
((,33,5)
(this,33,6)
(.,33,10)
(id,Search,33,11)
((,33,17)
(num,39,33,18)
(),33,20)
(),33,21)
(System.out.println,33,23)
((,33,41)
(num,1,33,42)
(),33,43)
(;,33,45)
(else,34,2)
(System.out.println,34,7)
((,34,25)
(num,0,34,26)
(),34,27)
(;,34,29)
(if,35,2)
((,35,5)
(this,35,6)
(.,35,10)
(id,Search,35,11)
((,35,17)
(num,50,35,18)
(),35,20)
(),35,21)
(System.out.println,35,23)
((,35,41)
(num,1,35,42)
(),35,43)
(;,35,45)
(else,36,2)
(System.out.println,36,7)
((,36,25)
(num,0,36,26)
(),36,27)
(;,36,29)
(return,38,2)
(num,999,38,9)
(;,38,13)
(},39,5)
(public,44,5)
(boolean,44,12)
(id,Search,44,20)
((,44,26)
(int,44,27)
(id,num,44,31)
(),44,34)
({,44,35)
(boolean,45,2)
(id,bs01,45,10)
(;,45,15)
(int,46,2)
(id,right,46,6)
(;,46,12)
(int,47,2)
(id,left,47,6)
(;,47,11)
(boolean,48,2)
(id,var_cont,48,10)
(;,48,19)
(int,49,2)
(id,medium,49,6)
(;,49,13)
(int,50,2)
(id,aux01,50,6)
(;,50,12)
(int,51,2)
(id,nt,51,6)
(;,51,9)
(id,aux01,53,2)
(=,53,8)
(num,0,53,10)
(;,53,12)
(id,bs01,54,2)
(=,54,7)
(false,54,9)
(;,54,15)
(id,right,55,2)
(=,55,8)
(id,number,55,10)
(.,55,16)
(length,55,17)
(;,55,24)
(id,right,56,2)
(=,56,8)
(id,right,56,10)
(-,56,16)
(num,1,56,18)
(;,56,20)
(id,left,57,2)
(=,57,7)
(num,0,57,9)
(;,57,11)
(id,var_cont,58,2)
(=,58,11)
(true,58,13)
(;,58,18)
(while,59,2)
((,59,8)
(id,var_cont,59,9)
(),59,17)
({,59,18)
(id,medium,60,6)
(=,60,13)
(id,left,60,15)
(+,60,20)
(id,right,60,22)
(;,60,28)
(id,medium,61,6)
(=,61,13)
(this,61,15)
(.,61,19)
(id,Div,61,20)
((,61,23)
(id,medium,61,24)
(),61,30)
(;,61,31)
(id,aux01,62,6)
(=,62,12)
(id,number,62,14)
([,62,20)
(id,medium,62,21)
(],62,27)
(;,62,29)
(if,63,6)
((,63,9)
(id,num,63,10)
(<,63,14)
(id,aux01,63,16)
(),63,21)
(id,right,63,23)
(=,63,29)
(id,medium,63,31)
(-,63,38)
(num,1,63,40)
(;,63,42)
(else,64,6)
(id,left,64,11)
(=,64,16)
(id,medium,64,18)
(+,64,25)
(num,1,64,27)
(;,64,29)
(if,65,6)
((,65,9)
(this,65,10)
(.,65,14)
(id,Compare,65,15)
((,65,22)
(id,aux01,65,23)
(,,65,28)
(id,num,65,29)
(),65,32)
(),65,33)
(id,var_cont,65,35)
(=,65,44)
(false,65,46)
(;,65,52)
(else,66,6)
(id,var_cont,66,11)
(=,66,20)
(true,66,22)
(;,66,27)
(if,67,6)
((,67,9)
(id,right,67,10)
(<,67,16)
(id,left,67,18)
(),67,22)
(id,var_cont,67,24)
(=,67,33)
(false,67,35)
(;,67,41)
(else,68,6)
(id,nt,68,11)
(=,68,14)
(num,0,68,16)
(;,68,18)
(},69,2)
(if,71,2)
((,71,5)
(this,71,6)
(.,71,10)
(id,Compare,71,11)
((,71,18)
(id,aux01,71,19)
(,,71,24)
(id,num,71,25)
(),71,28)
(),71,29)
(id,bs01,71,31)
(=,71,36)
(true,71,38)
(;,71,43)
(else,72,2)
(id,bs01,72,7)
(=,72,12)
(false,72,14)
(;,72,20)
(return,73,2)
(id,bs01,73,9)
(;,73,14)
(},74,5)
(public,78,5)
(int,78,12)
(id,Div,78,16)
((,78,19)
(int,78,20)
(id,num,78,24)
(),78,27)
({,78,28)
(int,79,2)
(id,count01,79,6)
(;,79,14)
(int,80,2)
(id,count02,80,6)
(;,80,14)
(int,81,2)
(id,aux03,81,6)
(;,81,12)
(id,count01,83,2)
(=,83,10)
(num,0,83,12)
(;,83,14)
(id,count02,84,2)
(=,84,10)
(num,0,84,12)
(;,84,14)
(id,aux03,85,2)
(=,85,8)
(id,num,85,10)
(-,85,14)
(num,1,85,16)
(;,85,18)
(while,86,2)
((,86,8)
(id,count02,86,9)
(<,86,17)
(id,aux03,86,19)
(),86,24)
({,86,26)
(id,count01,87,6)
(=,87,14)
(id,count01,87,16)
(+,87,24)
(num,1,87,26)
(;,87,28)
(id,count02,88,6)
(=,88,14)
(id,count02,88,16)
(+,88,24)
(num,2,88,26)
(;,88,28)
(},89,2)
(return,90,2)
(id,count01,90,9)
(;,90,17)
(},91,5)
(public,97,5)
(boolean,97,12)
(id,Compare,97,20)
((,97,27)
(int,97,28)
(id,num1,97,32)
(,,97,37)
(int,97,39)
(id,num2,97,43)
(),97,47)
({,97,48)
(boolean,98,2)
(id,retval,98,10)
(;,98,17)
(int,99,2)
(id,aux02,99,6)
(;,99,12)
(id,retval,101,2)
(=,101,9)
(false,101,11)
(;,101,17)
(id,aux02,102,2)
(=,102,8)
(id,num2,102,10)
(+,102,15)
(num,1,102,17)
(;,102,19)
(if,103,2)
((,103,5)
(id,num1,103,6)
(<,103,11)
(id,num2,103,13)
(),103,17)
(id,retval,103,19)
(=,103,26)
(false,103,28)
(;,103,34)
(else,104,2)
(if,104,7)
((,104,10)
(!,104,11)
((,104,12)
(id,num1,104,13)
(<,104,18)
(id,aux02,104,20)
(),104,25)
(),104,26)
(id,retval,104,28)
(=,104,35)
(false,104,37)
(;,104,43)
(else,105,2)
(id,retval,105,7)
(=,105,14)
(true,105,16)
(;,105,21)
(return,106,2)
(id,retval,106,9)
(;,106,16)
(},107,5)
(public,110,5)
(int,110,12)
(id,Print,110,16)
((,110,21)
(),110,22)
({,110,23)
(int,111,2)
(id,j,111,6)
(;,111,8)
(id,j,113,2)
(=,113,4)
(num,1,113,6)
(;,113,8)
(while,114,2)
((,114,8)
(id,j,114,9)
(<,114,11)
((,114,13)
(id,size,114,14)
(),114,18)
(),114,19)
({,114,21)
(System.out.println,115,6)
((,115,24)
(id,number,115,25)
([,115,31)
(id,j,115,32)
(],115,33)
(),115,34)
(;,115,35)
(id,j,116,6)
(=,116,8)
(id,j,116,10)
(+,116,12)
(num,1,116,14)
(;,116,16)
(},117,2)
(System.out.println,118,2)
((,118,20)
(num,99999,118,21)
(),118,26)
(;,118,27)
(return,119,2)
(num,0,119,9)
(;,119,11)
(},120,5)
(public,124,5)
(int,124,12)
(id,Init,124,16)
((,124,20)
(int,124,21)
(id,sz,124,25)
(),124,27)
({,124,28)
(int,125,2)
(id,j,125,6)
(;,125,8)
(int,126,2)
(id,k,126,6)
(;,126,8)
(int,127,2)
(id,aux02,127,6)
(;,127,12)
(int,128,2)
(id,aux01,128,6)
(;,128,12)
(id,size,130,2)
(=,130,7)
(id,sz,130,9)
(;,130,12)
(id,number,131,2)
(=,131,9)
(new,131,11)
(int,131,15)
([,131,18)
(id,sz,131,19)
(],131,21)
(;,131,23)
(id,j,133,2)
(=,133,4)
(num,1,133,6)
(;,133,8)
(id,k,134,2)
(=,134,4)
(id,size,134,6)
(+,134,11)
(num,1,134,13)
(;,134,15)
(while,135,2)
((,135,8)
(id,j,135,9)
(<,135,11)
((,135,13)
(id,size,135,14)
(),135,18)
(),135,19)
({,135,21)
(id,aux01,136,6)
(=,136,12)
(num,2,136,14)
(*,136,16)
(id,j,136,18)
(;,136,20)
(id,aux02,137,6)
(=,137,12)
(id,k,137,14)
(-,137,16)
(num,3,137,18)
(;,137,20)
(id,number,138,6)
([,138,12)
(id,j,138,13)
(],138,14)
(=,138,16)
(id,aux01,138,18)
(+,138,24)
(id,aux02,138,26)
(;,138,32)
(id,j,139,6)
(=,139,8)
(id,j,139,10)
(+,139,12)
(num,1,139,14)
(;,139,16)
(id,k,140,6)
(=,140,8)
(id,k,140,10)
(-,140,12)
(num,1,140,14)
(;,140,16)
(},141,2)
(return,142,2)
(num,0,142,9)
(;,142,11)
(},143,5)
(},145,1)
(<<EOF>>,146,1)
*/

java.io.FileReader f = new java.io.FileReader("bubblesort.java");
minijava.Scanner scan = new minijava.Scanner(f);
for(minijava.Token tok: scan.tokens()) 
	System.out.println(tok);
/* Saída:
(class,1,1)
(id,BubbleSort,1,7)
({,1,17)
(public,2,5)
(static,2,12)
(void,2,19)
(main,2,24)
((,2,28)
(String,2,29)
([,2,35)
(],2,36)
(id,a,2,38)
(),2,39)
({,2,40)
(System.out.println,3,2)
((,3,20)
(new,3,21)
(id,BBS,3,25)
((,3,28)
(),3,29)
(.,3,30)
(id,Start,3,31)
((,3,36)
(num,10,3,37)
(),3,39)
(),3,40)
(;,3,41)
(},4,5)
(},5,1)
(class,11,1)
(id,BBS,11,7)
({,11,10)
(int,13,5)
([,13,8)
(],13,9)
(id,number,13,11)
(;,13,18)
(int,14,5)
(id,size,14,9)
(;,14,14)
(public,18,5)
(int,18,12)
(id,Start,18,16)
((,18,21)
(int,18,22)
(id,sz,18,26)
(),18,28)
({,18,29)
(int,19,2)
(id,aux01,19,6)
(;,19,12)
(id,aux01,20,2)
(=,20,8)
(this,20,10)
(.,20,14)
(id,Init,20,15)
((,20,19)
(id,sz,20,20)
(),20,22)
(;,20,23)
(id,aux01,21,2)
(=,21,8)
(this,21,10)
(.,21,14)
(id,Print,21,15)
((,21,20)
(),21,21)
(;,21,22)
(System.out.println,22,2)
((,22,20)
(num,99999,22,21)
(),22,26)
(;,22,27)
(id,aux01,23,2)
(=,23,8)
(this,23,10)
(.,23,14)
(id,Sort,23,15)
((,23,19)
(),23,20)
(;,23,21)
(id,aux01,24,2)
(=,24,8)
(this,24,10)
(.,24,14)
(id,Print,24,15)
((,24,20)
(),24,21)
(;,24,22)
(return,25,2)
(num,0,25,9)
(;,25,11)
(},26,5)
(public,30,5)
(int,30,12)
(id,Sort,30,16)
((,30,20)
(),30,21)
({,30,22)
(int,31,2)
(id,nt,31,6)
(;,31,9)
(int,32,2)
(id,i,32,6)
(;,32,8)
(int,33,2)
(id,aux02,33,6)
(;,33,12)
(int,34,2)
(id,aux04,34,6)
(;,34,12)
(int,35,2)
(id,aux05,35,6)
(;,35,12)
(int,36,2)
(id,aux06,36,6)
(;,36,12)
(int,37,2)
(id,aux07,37,6)
(;,37,12)
(int,38,2)
(id,j,38,6)
(;,38,8)
(int,39,2)
(id,t,39,6)
(;,39,8)
(id,i,40,2)
(=,40,4)
(id,size,40,6)
(-,40,11)
(num,1,40,13)
(;,40,15)
(id,aux02,41,2)
(=,41,8)
(num,0,41,10)
(-,41,12)
(num,1,41,14)
(;,41,16)
(while,42,2)
((,42,8)
(id,aux02,42,9)
(<,42,15)
(id,i,42,17)
(),42,18)
({,42,20)
(id,j,43,6)
(=,43,8)
(num,1,43,10)
(;,43,12)
(while,45,6)
((,45,12)
(id,j,45,13)
(<,45,15)
((,45,17)
(id,i,45,18)
(+,45,19)
(num,1,45,20)
(),45,21)
(),45,22)
({,45,23)
(id,aux07,46,3)
(=,46,9)
(id,j,46,11)
(-,46,13)
(num,1,46,15)
(;,46,17)
(id,aux04,47,3)
(=,47,9)
(id,number,47,11)
([,47,17)
(id,aux07,47,18)
(],47,23)
(;,47,25)
(id,aux05,48,3)
(=,48,9)
(id,number,48,11)
([,48,17)
(id,j,48,18)
(],48,19)
(;,48,21)
(if,49,3)
((,49,6)
(id,aux05,49,7)
(<,49,13)
(id,aux04,49,15)
(),49,20)
({,49,22)
(id,aux06,50,7)
(=,50,13)
(id,j,50,15)
(-,50,17)
(num,1,50,19)
(;,50,21)
(id,t,51,7)
(=,51,9)
(id,number,51,11)
([,51,17)
(id,aux06,51,18)
(],51,23)
(;,51,25)
(id,number,52,7)
([,52,13)
(id,aux06,52,14)
(],52,19)
(=,52,21)
(id,number,52,23)
([,52,29)
(id,j,52,30)
(],52,31)
(;,52,33)
(id,number,53,7)
([,53,13)
(id,j,53,14)
(],53,15)
(=,53,17)
(id,t,53,19)
(;,53,20)
(},54,3)
(else,55,3)
(id,nt,55,8)
(=,55,11)
(num,0,55,13)
(;,55,15)
(id,j,56,3)
(=,56,5)
(id,j,56,7)
(+,56,9)
(num,1,56,11)
(;,56,13)
(},57,6)
(id,i,58,6)
(=,58,8)
(id,i,58,10)
(-,58,12)
(num,1,58,14)
(;,58,16)
(},59,2)
(return,60,2)
(num,0,60,9)
(;,60,11)
(},61,5)
(public,64,5)
(int,64,12)
(id,Print,64,16)
((,64,21)
(),64,22)
({,64,23)
(int,65,2)
(id,j,65,6)
(;,65,8)
(id,j,66,2)
(=,66,4)
(num,0,66,6)
(;,66,8)
(while,67,2)
((,67,8)
(id,j,67,9)
(<,67,11)
((,67,13)
(id,size,67,14)
(),67,18)
(),67,19)
({,67,21)
(System.out.println,68,6)
((,68,24)
(id,number,68,25)
([,68,31)
(id,j,68,32)
(],68,33)
(),68,34)
(;,68,35)
(id,j,69,6)
(=,69,8)
(id,j,69,10)
(+,69,12)
(num,1,69,14)
(;,69,16)
(},70,2)
(return,71,2)
(num,0,71,9)
(;,71,11)
(},72,5)
(public,75,5)
(int,75,12)
(id,Init,75,16)
((,75,20)
(int,75,21)
(id,sz,75,25)
(),75,27)
({,75,28)
(id,size,76,2)
(=,76,7)
(id,sz,76,9)
(;,76,12)
(id,number,77,2)
(=,77,9)
(new,77,11)
(int,77,15)
([,77,18)
(id,sz,77,19)
(],77,21)
(;,77,23)
(id,number,79,2)
([,79,8)
(num,0,79,9)
(],79,10)
(=,79,12)
(num,20,79,14)
(;,79,17)
(id,number,80,2)
([,80,8)
(num,1,80,9)
(],80,10)
(=,80,12)
(num,7,80,14)
(;,80,17)
(id,number,81,2)
([,81,8)
(num,2,81,9)
(],81,10)
(=,81,12)
(num,12,81,14)
(;,81,17)
(id,number,82,2)
([,82,8)
(num,3,82,9)
(],82,10)
(=,82,12)
(num,18,82,14)
(;,82,17)
(id,number,83,2)
([,83,8)
(num,4,83,9)
(],83,10)
(=,83,12)
(num,2,83,14)
(;,83,17)
(id,number,84,2)
([,84,8)
(num,5,84,9)
(],84,10)
(=,84,12)
(num,11,84,14)
(;,84,17)
(id,number,85,2)
([,85,8)
(num,6,85,9)
(],85,10)
(=,85,12)
(num,6,85,14)
(;,85,17)
(id,number,86,2)
([,86,8)
(num,7,86,9)
(],86,10)
(=,86,12)
(num,9,86,14)
(;,86,17)
(id,number,87,2)
([,87,8)
(num,8,87,9)
(],87,10)
(=,87,12)
(num,19,87,14)
(;,87,17)
(id,number,88,2)
([,88,8)
(num,9,88,9)
(],88,10)
(=,88,12)
(num,5,88,14)
(;,88,17)
(return,90,2)
(num,0,90,9)
(;,90,11)
(},91,5)
(},93,1)
(<<EOF>>,94,1)
*/

java.io.FileReader f = new java.io.FileReader("treevisitor.java");
minijava.Scanner scan = new minijava.Scanner(f);
for(minijava.Token tok: scan.tokens()) 
	System.out.println(tok);
/* Saída:
(class,5,1)
(id,TreeVisitor,5,7)
({,5,18)
(public,6,5)
(static,6,12)
(void,6,19)
(main,6,24)
((,6,28)
(String,6,29)
([,6,35)
(],6,36)
(id,a,6,38)
(),6,39)
({,6,40)
(System.out.println,7,2)
((,7,20)
(new,7,21)
(id,TV,7,25)
((,7,27)
(),7,28)
(.,7,29)
(id,Start,7,30)
((,7,35)
(),7,36)
(),7,37)
(;,7,38)
(},8,5)
(},9,1)
(class,11,1)
(id,TV,11,7)
({,11,10)
(public,13,5)
(int,13,12)
(id,Start,13,16)
((,13,21)
(),13,22)
({,13,23)
(id,Tree,14,2)
(id,root,14,7)
(;,14,12)
(boolean,15,2)
(id,ntb,15,10)
(;,15,14)
(int,16,2)
(id,nti,16,6)
(;,16,10)
(id,MyVisitor,17,2)
(id,v,17,12)
(;,17,14)
(id,root,19,2)
(=,19,7)
(new,19,9)
(id,Tree,19,13)
((,19,17)
(),19,18)
(;,19,19)
(id,ntb,20,2)
(=,20,6)
(id,root,20,8)
(.,20,12)
(id,Init,20,13)
((,20,17)
(num,16,20,18)
(),20,20)
(;,20,21)
(id,ntb,21,2)
(=,21,6)
(id,root,21,8)
(.,21,12)
(id,Print,21,13)
((,21,18)
(),21,19)
(;,21,20)
(System.out.println,22,2)
((,22,20)
(num,100000000,22,21)
(),22,30)
(;,22,31)
(id,ntb,23,2)
(=,23,6)
(id,root,23,8)
(.,23,12)
(id,Insert,23,13)
((,23,19)
(num,8,23,20)
(),23,21)
(;,23,23)
(id,ntb,24,2)
(=,24,6)
(id,root,24,8)
(.,24,12)
(id,Insert,24,13)
((,24,19)
(num,24,24,20)
(),24,22)
(;,24,24)
(id,ntb,25,2)
(=,25,6)
(id,root,25,8)
(.,25,12)
(id,Insert,25,13)
((,25,19)
(num,4,25,20)
(),25,21)
(;,25,23)
(id,ntb,26,2)
(=,26,6)
(id,root,26,8)
(.,26,12)
(id,Insert,26,13)
((,26,19)
(num,12,26,20)
(),26,22)
(;,26,24)
(id,ntb,27,2)
(=,27,6)
(id,root,27,8)
(.,27,12)
(id,Insert,27,13)
((,27,19)
(num,20,27,20)
(),27,22)
(;,27,24)
(id,ntb,28,2)
(=,28,6)
(id,root,28,8)
(.,28,12)
(id,Insert,28,13)
((,28,19)
(num,28,28,20)
(),28,22)
(;,28,24)
(id,ntb,29,2)
(=,29,6)
(id,root,29,8)
(.,29,12)
(id,Insert,29,13)
((,29,19)
(num,14,29,20)
(),29,22)
(;,29,24)
(id,ntb,30,2)
(=,30,6)
(id,root,30,8)
(.,30,12)
(id,Print,30,13)
((,30,18)
(),30,19)
(;,30,20)
(System.out.println,31,2)
((,31,20)
(num,100000000,31,21)
(),31,30)
(;,31,31)
(id,v,32,2)
(=,32,4)
(new,32,6)
(id,MyVisitor,32,10)
((,32,19)
(),32,20)
(;,32,21)
(System.out.println,33,2)
((,33,20)
(num,50000000,33,21)
(),33,29)
(;,33,30)
(id,nti,34,2)
(=,34,6)
(id,root,34,8)
(.,34,12)
(id,accept,34,13)
((,34,19)
(id,v,34,20)
(),34,21)
(;,34,22)
(System.out.println,35,2)
((,35,20)
(num,100000000,35,21)
(),35,30)
(;,35,31)
(System.out.println,36,2)
((,36,20)
(id,root,36,21)
(.,36,25)
(id,Search,36,26)
((,36,32)
(num,24,36,33)
(),36,35)
(),36,36)
(;,36,37)
(System.out.println,37,2)
((,37,20)
(id,root,37,21)
(.,37,25)
(id,Search,37,26)
((,37,32)
(num,12,37,33)
(),37,35)
(),37,36)
(;,37,37)
(System.out.println,38,2)
((,38,20)
(id,root,38,21)
(.,38,25)
(id,Search,38,26)
((,38,32)
(num,16,38,33)
(),38,35)
(),38,36)
(;,38,37)
(System.out.println,39,2)
((,39,20)
(id,root,39,21)
(.,39,25)
(id,Search,39,26)
((,39,32)
(num,50,39,33)
(),39,35)
(),39,36)
(;,39,37)
(System.out.println,40,2)
((,40,20)
(id,root,40,21)
(.,40,25)
(id,Search,40,26)
((,40,32)
(num,12,40,33)
(),40,35)
(),40,36)
(;,40,37)
(id,ntb,41,2)
(=,41,6)
(id,root,41,8)
(.,41,12)
(id,Delete,41,13)
((,41,19)
(num,12,41,20)
(),41,22)
(;,41,23)
(id,ntb,42,2)
(=,42,6)
(id,root,42,8)
(.,42,12)
(id,Print,42,13)
((,42,18)
(),42,19)
(;,42,20)
(System.out.println,43,2)
((,43,20)
(id,root,43,21)
(.,43,25)
(id,Search,43,26)
((,43,32)
(num,12,43,33)
(),43,35)
(),43,36)
(;,43,37)
(return,45,2)
(num,0,45,9)
(;,45,11)
(},46,5)
(},48,1)
(class,51,1)
(id,Tree,51,7)
({,51,11)
(id,Tree,52,5)
(id,left,52,10)
(;,52,15)
(id,Tree,53,5)
(id,right,53,10)
(;,53,15)
(int,54,5)
(id,key,54,9)
(;,54,13)
(boolean,55,5)
(id,has_left,55,13)
(;,55,22)
(boolean,56,5)
(id,has_right,56,13)
(;,56,23)
(id,Tree,57,5)
(id,my_null,57,10)
(;,57,18)
(public,75,5)
(boolean,75,12)
(id,Init,75,20)
((,75,24)
(int,75,25)
(id,v_key,75,29)
(),75,34)
({,75,35)
(id,key,76,2)
(=,76,6)
(id,v_key,76,8)
(;,76,14)
(id,has_left,77,2)
(=,77,11)
(false,77,13)
(;,77,19)
(id,has_right,78,2)
(=,78,12)
(false,78,14)
(;,78,20)
(return,79,2)
(true,79,9)
(;,79,14)
(},80,5)
(public,82,5)
(boolean,82,12)
(id,SetRight,82,20)
((,82,28)
(id,Tree,82,29)
(id,rn,82,34)
(),82,36)
({,82,37)
(id,right,83,2)
(=,83,8)
(id,rn,83,10)
(;,83,13)
(return,84,2)
(true,84,9)
(;,84,14)
(},85,5)
(public,87,5)
(boolean,87,12)
(id,SetLeft,87,20)
((,87,27)
(id,Tree,87,28)
(id,ln,87,33)
(),87,35)
({,87,36)
(id,left,88,2)
(=,88,7)
(id,ln,88,9)
(;,88,12)
(return,89,2)
(true,89,9)
(;,89,14)
(},90,5)
(public,92,5)
(id,Tree,92,12)
(id,GetRight,92,17)
((,92,25)
(),92,26)
({,92,27)
(return,93,2)
(id,right,93,9)
(;,93,15)
(},94,5)
(public,96,5)
(id,Tree,96,12)
(id,GetLeft,96,17)
((,96,24)
(),96,25)
({,96,26)
(return,97,2)
(id,left,97,9)
(;,97,13)
(},98,5)
(public,100,5)
(int,100,12)
(id,GetKey,100,16)
((,100,22)
(),100,23)
({,100,24)
(return,101,2)
(id,key,101,9)
(;,101,13)
(},102,5)
(public,104,5)
(boolean,104,12)
(id,SetKey,104,20)
((,104,26)
(int,104,27)
(id,v_key,104,31)
(),104,36)
({,104,37)
(id,key,105,2)
(=,105,6)
(id,v_key,105,8)
(;,105,14)
(return,106,2)
(true,106,9)
(;,106,14)
(},107,5)
(public,109,5)
(boolean,109,12)
(id,GetHas_Right,109,20)
((,109,32)
(),109,33)
({,109,34)
(return,110,2)
(id,has_right,110,9)
(;,110,19)
(},111,5)
(public,113,5)
(boolean,113,12)
(id,GetHas_Left,113,20)
((,113,31)
(),113,32)
({,113,33)
(return,114,2)
(id,has_left,114,9)
(;,114,18)
(},115,5)
(public,117,5)
(boolean,117,12)
(id,SetHas_Left,117,20)
((,117,31)
(boolean,117,32)
(id,val,117,40)
(),117,43)
({,117,44)
(id,has_left,118,3)
(=,118,12)
(id,val,118,14)
(;,118,18)
(return,119,3)
(true,119,10)
(;,119,15)
(},120,5)
(public,122,5)
(boolean,122,12)
(id,SetHas_Right,122,20)
((,122,32)
(boolean,122,33)
(id,val,122,41)
(),122,44)
({,122,45)
(id,has_right,123,3)
(=,123,13)
(id,val,123,15)
(;,123,19)
(return,124,3)
(true,124,10)
(;,124,15)
(},125,5)
(public,127,5)
(boolean,127,12)
(id,Compare,127,20)
((,127,27)
(int,127,28)
(id,num1,127,32)
(,,127,37)
(int,127,39)
(id,num2,127,43)
(),127,47)
({,127,48)
(boolean,128,2)
(id,ntb,128,10)
(;,128,14)
(int,129,2)
(id,nti,129,6)
(;,129,10)
(id,ntb,131,2)
(=,131,6)
(false,131,8)
(;,131,14)
(id,nti,132,2)
(=,132,6)
(id,num2,132,8)
(+,132,13)
(num,1,132,15)
(;,132,17)
(if,133,2)
((,133,5)
(id,num1,133,6)
(<,133,11)
(id,num2,133,13)
(),133,17)
(id,ntb,133,19)
(=,133,23)
(false,133,25)
(;,133,31)
(else,134,2)
(if,134,7)
((,134,10)
(!,134,11)
((,134,12)
(id,num1,134,13)
(<,134,18)
(id,nti,134,20)
(),134,23)
(),134,24)
(id,ntb,134,26)
(=,134,30)
(false,134,32)
(;,134,38)
(else,135,2)
(id,ntb,135,7)
(=,135,11)
(true,135,13)
(;,135,18)
(return,136,2)
(id,ntb,136,9)
(;,136,13)
(},137,5)
(public,139,5)
(boolean,139,12)
(id,Insert,139,20)
((,139,26)
(int,139,27)
(id,v_key,139,31)
(),139,36)
({,139,37)
(id,Tree,140,2)
(id,new_node,140,7)
(;,140,16)
(boolean,141,2)
(id,ntb,141,10)
(;,141,14)
(id,Tree,142,2)
(id,current_node,142,7)
(;,142,20)
(boolean,143,2)
(id,cont,143,10)
(;,143,15)
(int,144,2)
(id,key_aux,144,6)
(;,144,14)
(id,new_node,146,2)
(=,146,11)
(new,146,13)
(id,Tree,146,17)
((,146,21)
(),146,22)
(;,146,23)
(id,ntb,147,2)
(=,147,6)
(id,new_node,147,8)
(.,147,16)
(id,Init,147,17)
((,147,21)
(id,v_key,147,22)
(),147,27)
(;,147,29)
(id,current_node,148,2)
(=,148,15)
(this,148,17)
(;,148,22)
(id,cont,149,2)
(=,149,7)
(true,149,9)
(;,149,14)
(while,150,2)
((,150,8)
(id,cont,150,9)
(),150,13)
({,150,14)
(id,key_aux,151,6)
(=,151,14)
(id,current_node,151,16)
(.,151,28)
(id,GetKey,151,29)
((,151,35)
(),151,36)
(;,151,37)
(if,152,6)
((,152,9)
(id,v_key,152,10)
(<,152,16)
(id,key_aux,152,18)
(),152,25)
({,152,26)
(if,153,3)
((,153,6)
(id,current_node,153,7)
(.,153,19)
(id,GetHas_Left,153,20)
((,153,31)
(),153,32)
(),153,33)
(id,current_node,154,7)
(=,154,20)
(id,current_node,154,22)
(.,154,34)
(id,GetLeft,154,35)
((,154,42)
(),154,43)
(;,154,45)
(else,155,3)
({,155,8)
(id,cont,156,7)
(=,156,12)
(false,156,14)
(;,156,20)
(id,ntb,157,7)
(=,157,11)
(id,current_node,157,13)
(.,157,25)
(id,SetHas_Left,157,26)
((,157,37)
(true,157,38)
(),157,42)
(;,157,43)
(id,ntb,158,7)
(=,158,11)
(id,current_node,158,13)
(.,158,25)
(id,SetLeft,158,26)
((,158,33)
(id,new_node,158,34)
(),158,42)
(;,158,43)
(},159,3)
(},160,6)
(else,161,6)
({,161,10)
(if,162,3)
((,162,6)
(id,current_node,162,7)
(.,162,19)
(id,GetHas_Right,162,20)
((,162,32)
(),162,33)
(),162,34)
(id,current_node,163,7)
(=,163,20)
(id,current_node,163,22)
(.,163,34)
(id,GetRight,163,35)
((,163,43)
(),163,44)
(;,163,46)
(else,164,3)
({,164,8)
(id,cont,165,7)
(=,165,12)
(false,165,14)
(;,165,20)
(id,ntb,166,7)
(=,166,11)
(id,current_node,166,13)
(.,166,25)
(id,SetHas_Right,166,26)
((,166,38)
(true,166,39)
(),166,43)
(;,166,44)
(id,ntb,167,7)
(=,167,11)
(id,current_node,167,13)
(.,167,25)
(id,SetRight,167,26)
((,167,34)
(id,new_node,167,35)
(),167,43)
(;,167,44)
(},168,3)
(},169,6)
(},170,2)
(return,171,2)
(true,171,9)
(;,171,14)
(},172,5)
(public,174,5)
(boolean,174,12)
(id,Delete,174,20)
((,174,26)
(int,174,27)
(id,v_key,174,31)
(),174,36)
({,174,37)
(id,Tree,175,2)
(id,current_node,175,7)
(;,175,20)
(id,Tree,176,2)
(id,parent_node,176,7)
(;,176,19)
(boolean,177,2)
(id,cont,177,10)
(;,177,15)
(boolean,178,2)
(id,found,178,10)
(;,178,16)
(boolean,179,2)
(id,ntb,179,10)
(;,179,14)
(boolean,180,2)
(id,is_root,180,10)
(;,180,18)
(int,181,2)
(id,key_aux,181,6)
(;,181,14)
(id,current_node,183,2)
(=,183,15)
(this,183,17)
(;,183,22)
(id,parent_node,184,2)
(=,184,14)
(this,184,16)
(;,184,21)
(id,cont,185,2)
(=,185,7)
(true,185,9)
(;,185,14)
(id,found,186,2)
(=,186,8)
(false,186,10)
(;,186,16)
(id,is_root,187,2)
(=,187,10)
(true,187,12)
(;,187,17)
(while,188,2)
((,188,8)
(id,cont,188,9)
(),188,13)
({,188,14)
(id,key_aux,189,6)
(=,189,14)
(id,current_node,189,16)
(.,189,28)
(id,GetKey,189,29)
((,189,35)
(),189,36)
(;,189,37)
(if,190,6)
((,190,9)
(id,v_key,190,10)
(<,190,16)
(id,key_aux,190,18)
(),190,25)
(if,191,3)
((,191,6)
(id,current_node,191,7)
(.,191,19)
(id,GetHas_Left,191,20)
((,191,31)
(),191,32)
(),191,33)
({,191,34)
(id,parent_node,192,7)
(=,192,19)
(id,current_node,192,21)
(;,192,34)
(id,current_node,193,7)
(=,193,20)
(id,current_node,193,22)
(.,193,34)
(id,GetLeft,193,35)
((,193,42)
(),193,43)
(;,193,45)
(},194,3)
(else,195,3)
(id,cont,195,8)
(=,195,13)
(false,195,15)
(;,195,21)
(else,196,6)
(if,197,3)
((,197,6)
(id,key_aux,197,7)
(<,197,15)
(id,v_key,197,17)
(),197,22)
(if,198,7)
((,198,10)
(id,current_node,198,11)
(.,198,23)
(id,GetHas_Right,198,24)
((,198,36)
(),198,37)
(),198,38)
({,198,39)
(id,parent_node,199,4)
(=,199,16)
(id,current_node,199,18)
(;,199,31)
(id,current_node,200,4)
(=,200,17)
(id,current_node,200,19)
(.,200,31)
(id,GetRight,200,32)
((,200,40)
(),200,41)
(;,200,43)
(},201,7)
(else,202,7)
(id,cont,202,12)
(=,202,17)
(false,202,19)
(;,202,25)
(else,203,3)
({,203,8)
(if,204,7)
((,204,10)
(id,is_root,204,11)
(),204,18)
(if,205,4)
((,205,7)
(!,205,8)
(id,current_node,205,9)
(.,205,21)
(id,GetHas_Right,205,22)
((,205,34)
(),205,35)
(&&,205,37)
(!,206,8)
(id,current_node,206,9)
(.,206,21)
(id,GetHas_Left,206,22)
((,206,33)
(),206,34)
(),206,36)
(id,ntb,207,8)
(=,207,12)
(true,207,14)
(;,207,19)
(else,208,4)
(id,ntb,209,8)
(=,209,12)
(this,209,14)
(.,209,18)
(id,Remove,209,19)
((,209,25)
(id,parent_node,209,26)
(,,209,37)
(id,current_node,209,38)
(),209,50)
(;,209,51)
(else,210,7)
(id,ntb,210,12)
(=,210,16)
(this,210,18)
(.,210,22)
(id,Remove,210,23)
((,210,29)
(id,parent_node,210,30)
(,,210,41)
(id,current_node,210,42)
(),210,54)
(;,210,55)
(id,found,211,7)
(=,211,13)
(true,211,15)
(;,211,20)
(id,cont,212,7)
(=,212,12)
(false,212,14)
(;,212,20)
(},213,3)
(id,is_root,214,6)
(=,214,14)
(false,214,16)
(;,214,22)
(},215,2)
(return,216,2)
(id,found,216,9)
(;,216,15)
(},217,5)
(public,219,5)
(boolean,219,12)
(id,Remove,219,20)
((,219,26)
(id,Tree,219,27)
(id,p_node,219,32)
(,,219,38)
(id,Tree,219,40)
(id,c_node,219,45)
(),219,51)
({,219,52)
(boolean,220,2)
(id,ntb,220,10)
(;,220,14)
(int,221,2)
(id,auxkey1,221,6)
(;,221,14)
(int,222,2)
(id,auxkey2,222,6)
(;,222,14)
(if,224,2)
((,224,5)
(id,c_node,224,6)
(.,224,12)
(id,GetHas_Left,224,13)
((,224,24)
(),224,25)
(),224,26)
(id,ntb,225,6)
(=,225,10)
(this,225,12)
(.,225,16)
(id,RemoveLeft,225,17)
((,225,27)
(id,p_node,225,28)
(,,225,34)
(id,c_node,225,35)
(),225,41)
(;,225,43)
(else,226,2)
(if,227,6)
((,227,9)
(id,c_node,227,10)
(.,227,16)
(id,GetHas_Right,227,17)
((,227,29)
(),227,30)
(),227,31)
(id,ntb,228,3)
(=,228,7)
(this,228,9)
(.,228,13)
(id,RemoveRight,228,14)
((,228,25)
(id,p_node,228,26)
(,,228,32)
(id,c_node,228,33)
(),228,39)
(;,228,41)
(else,229,6)
({,229,11)
(id,auxkey1,230,3)
(=,230,11)
(id,c_node,230,13)
(.,230,19)
(id,GetKey,230,20)
((,230,26)
(),230,27)
(;,230,28)
(id,auxkey2,231,3)
(=,231,11)
((,231,13)
(id,p_node,231,14)
(.,231,20)
(id,GetLeft,231,21)
((,231,28)
(),231,29)
(),231,30)
(.,231,31)
(id,GetKey,231,32)
((,231,38)
(),231,39)
(;,231,41)
(if,232,3)
((,232,6)
(this,232,7)
(.,232,11)
(id,Compare,232,12)
((,232,19)
(id,auxkey1,232,20)
(,,232,27)
(id,auxkey2,232,28)
(),232,35)
(),232,36)
({,232,38)
(id,ntb,233,7)
(=,233,11)
(id,p_node,233,13)
(.,233,19)
(id,SetLeft,233,20)
((,233,27)
(id,my_null,233,28)
(),233,35)
(;,233,36)
(id,ntb,234,7)
(=,234,11)
(id,p_node,234,13)
(.,234,19)
(id,SetHas_Left,234,20)
((,234,31)
(false,234,32)
(),234,37)
(;,234,38)
(},235,3)
(else,236,3)
({,236,8)
(id,ntb,237,7)
(=,237,11)
(id,p_node,237,13)
(.,237,19)
(id,SetRight,237,20)
((,237,28)
(id,my_null,237,29)
(),237,36)
(;,237,37)
(id,ntb,238,7)
(=,238,11)
(id,p_node,238,13)
(.,238,19)
(id,SetHas_Right,238,20)
((,238,32)
(false,238,33)
(),238,38)
(;,238,39)
(},239,3)
(},240,6)
(return,241,2)
(true,241,9)
(;,241,14)
(},242,5)
(public,244,5)
(boolean,244,12)
(id,RemoveRight,244,20)
((,244,31)
(id,Tree,244,32)
(id,p_node,244,37)
(,,244,43)
(id,Tree,244,45)
(id,c_node,244,50)
(),244,56)
({,244,57)
(boolean,245,2)
(id,ntb,245,10)
(;,245,14)
(while,246,2)
((,246,8)
(id,c_node,246,9)
(.,246,15)
(id,GetHas_Right,246,16)
((,246,28)
(),246,29)
(),246,30)
({,246,31)
(id,ntb,247,6)
(=,247,10)
(id,c_node,247,12)
(.,247,18)
(id,SetKey,247,19)
((,247,25)
((,247,26)
(id,c_node,247,27)
(.,247,33)
(id,GetRight,247,34)
((,247,42)
(),247,43)
(),247,44)
(.,247,45)
(id,GetKey,247,46)
((,247,52)
(),247,53)
(),247,54)
(;,247,55)
(id,p_node,248,6)
(=,248,13)
(id,c_node,248,15)
(;,248,22)
(id,c_node,249,6)
(=,249,13)
(id,c_node,249,15)
(.,249,21)
(id,GetRight,249,22)
((,249,30)
(),249,31)
(;,249,33)
(},250,2)
(id,ntb,251,2)
(=,251,6)
(id,p_node,251,8)
(.,251,14)
(id,SetRight,251,15)
((,251,23)
(id,my_null,251,24)
(),251,31)
(;,251,32)
(id,ntb,252,2)
(=,252,6)
(id,p_node,252,8)
(.,252,14)
(id,SetHas_Right,252,15)
((,252,27)
(false,252,28)
(),252,33)
(;,252,34)
(return,253,2)
(true,253,9)
(;,253,14)
(},254,5)
(public,256,5)
(boolean,256,12)
(id,RemoveLeft,256,20)
((,256,30)
(id,Tree,256,31)
(id,p_node,256,36)
(,,256,42)
(id,Tree,256,44)
(id,c_node,256,49)
(),256,55)
({,256,56)
(boolean,257,2)
(id,ntb,257,10)
(;,257,14)
(while,258,2)
((,258,8)
(id,c_node,258,9)
(.,258,15)
(id,GetHas_Left,258,16)
((,258,27)
(),258,28)
(),258,29)
({,258,30)
(id,ntb,259,6)
(=,259,10)
(id,c_node,259,12)
(.,259,18)
(id,SetKey,259,19)
((,259,25)
((,259,26)
(id,c_node,259,27)
(.,259,33)
(id,GetLeft,259,34)
((,259,41)
(),259,42)
(),259,43)
(.,259,44)
(id,GetKey,259,45)
((,259,51)
(),259,52)
(),259,53)
(;,259,54)
(id,p_node,260,6)
(=,260,13)
(id,c_node,260,15)
(;,260,22)
(id,c_node,261,6)
(=,261,13)
(id,c_node,261,15)
(.,261,21)
(id,GetLeft,261,22)
((,261,29)
(),261,30)
(;,261,32)
(},262,2)
(id,ntb,263,2)
(=,263,6)
(id,p_node,263,8)
(.,263,14)
(id,SetLeft,263,15)
((,263,22)
(id,my_null,263,23)
(),263,30)
(;,263,31)
(id,ntb,264,2)
(=,264,6)
(id,p_node,264,8)
(.,264,14)
(id,SetHas_Left,264,15)
((,264,26)
(false,264,27)
(),264,32)
(;,264,33)
(return,265,2)
(true,265,9)
(;,265,14)
(},266,5)
(public,269,5)
(int,269,12)
(id,Search,269,16)
((,269,22)
(int,269,23)
(id,v_key,269,27)
(),269,32)
({,269,33)
(id,Tree,270,2)
(id,current_node,270,7)
(;,270,20)
(int,271,2)
(id,ifound,271,6)
(;,271,13)
(boolean,272,2)
(id,cont,272,10)
(;,272,15)
(int,273,2)
(id,key_aux,273,6)
(;,273,14)
(id,current_node,275,2)
(=,275,15)
(this,275,17)
(;,275,22)
(id,cont,276,2)
(=,276,7)
(true,276,9)
(;,276,14)
(id,ifound,277,2)
(=,277,9)
(num,0,277,11)
(;,277,13)
(while,278,2)
((,278,8)
(id,cont,278,9)
(),278,13)
({,278,14)
(id,key_aux,279,6)
(=,279,14)
(id,current_node,279,16)
(.,279,28)
(id,GetKey,279,29)
((,279,35)
(),279,36)
(;,279,37)
(if,280,6)
((,280,9)
(id,v_key,280,10)
(<,280,16)
(id,key_aux,280,18)
(),280,25)
(if,281,3)
((,281,6)
(id,current_node,281,7)
(.,281,19)
(id,GetHas_Left,281,20)
((,281,31)
(),281,32)
(),281,33)
(id,current_node,282,7)
(=,282,20)
(id,current_node,282,22)
(.,282,34)
(id,GetLeft,282,35)
((,282,42)
(),282,43)
(;,282,45)
(else,283,3)
(id,cont,283,8)
(=,283,13)
(false,283,15)
(;,283,21)
(else,284,6)
(if,285,3)
((,285,6)
(id,key_aux,285,7)
(<,285,15)
(id,v_key,285,17)
(),285,22)
(if,286,7)
((,286,10)
(id,current_node,286,11)
(.,286,23)
(id,GetHas_Right,286,24)
((,286,36)
(),286,37)
(),286,38)
(id,current_node,287,4)
(=,287,17)
(id,current_node,287,19)
(.,287,31)
(id,GetRight,287,32)
((,287,40)
(),287,41)
(;,287,43)
(else,288,7)
(id,cont,288,12)
(=,288,17)
(false,288,19)
(;,288,25)
(else,289,3)
({,289,8)
(id,ifound,290,7)
(=,290,14)
(num,1,290,16)
(;,290,18)
(id,cont,291,7)
(=,291,12)
(false,291,14)
(;,291,20)
(},292,3)
(},293,2)
(return,294,2)
(id,ifound,294,9)
(;,294,16)
(},295,5)
(public,297,5)
(boolean,297,12)
(id,Print,297,20)
((,297,25)
(),297,26)
({,297,27)
(boolean,298,2)
(id,ntb,298,10)
(;,298,14)
(id,Tree,299,2)
(id,current_node,299,7)
(;,299,20)
(id,current_node,301,2)
(=,301,15)
(this,301,17)
(;,301,22)
(id,ntb,302,2)
(=,302,6)
(this,302,8)
(.,302,12)
(id,RecPrint,302,13)
((,302,21)
(id,current_node,302,22)
(),302,34)
(;,302,35)
(return,303,2)
(true,303,9)
(;,303,14)
(},304,5)
(public,306,5)
(boolean,306,12)
(id,RecPrint,306,20)
((,306,28)
(id,Tree,306,29)
(id,node,306,34)
(),306,38)
({,306,39)
(boolean,307,2)
(id,ntb,307,10)
(;,307,14)
(if,309,2)
((,309,5)
(id,node,309,6)
(.,309,10)
(id,GetHas_Left,309,11)
((,309,22)
(),309,23)
(),309,24)
({,309,25)
(id,ntb,310,6)
(=,310,10)
(this,310,12)
(.,310,16)
(id,RecPrint,310,17)
((,310,25)
(id,node,310,26)
(.,310,30)
(id,GetLeft,310,31)
((,310,38)
(),310,39)
(),310,40)
(;,310,41)
(},311,2)
(else,311,4)
(id,ntb,311,9)
(=,311,13)
(true,311,15)
(;,311,20)
(System.out.println,312,2)
((,312,20)
(id,node,312,21)
(.,312,25)
(id,GetKey,312,26)
((,312,32)
(),312,33)
(),312,34)
(;,312,35)
(if,313,2)
((,313,5)
(id,node,313,6)
(.,313,10)
(id,GetHas_Right,313,11)
((,313,23)
(),313,24)
(),313,25)
({,313,26)
(id,ntb,314,6)
(=,314,10)
(this,314,12)
(.,314,16)
(id,RecPrint,314,17)
((,314,25)
(id,node,314,26)
(.,314,30)
(id,GetRight,314,31)
((,314,39)
(),314,40)
(),314,41)
(;,314,42)
(},315,2)
(else,315,4)
(id,ntb,315,9)
(=,315,13)
(true,315,15)
(;,315,20)
(return,316,2)
(true,316,9)
(;,316,14)
(},317,5)
(public,319,5)
(int,319,12)
(id,accept,319,16)
((,319,22)
(id,Visitor,319,23)
(id,v,319,31)
(),319,32)
({,319,33)
(int,320,2)
(id,nti,320,6)
(;,320,10)
(System.out.println,322,2)
((,322,20)
(num,333,322,21)
(),322,24)
(;,322,25)
(id,nti,323,2)
(=,323,6)
(id,v,323,8)
(.,323,9)
(id,visit,323,10)
((,323,15)
(this,323,16)
(),323,20)
(;,323,22)
(return,324,2)
(num,0,324,9)
(;,324,11)
(},325,5)
(},327,1)
(class,331,1)
(id,Visitor,331,7)
({,331,15)
(id,Tree,332,5)
(id,l,332,10)
(;,332,12)
(id,Tree,333,5)
(id,r,333,10)
(;,333,12)
(public,335,5)
(int,335,12)
(id,visit,335,16)
((,335,21)
(id,Tree,335,22)
(id,n,335,27)
(),335,28)
({,335,29)
(int,336,2)
(id,nti,336,6)
(;,336,10)
(if,338,2)
((,338,5)
(id,n,338,6)
(.,338,7)
(id,GetHas_Right,338,8)
((,338,20)
(),338,21)
(),338,22)
({,338,23)
(id,r,339,6)
(=,339,8)
(id,n,339,10)
(.,339,11)
(id,GetRight,339,12)
((,339,20)
(),339,21)
(;,339,23)
(id,nti,340,6)
(=,340,10)
(id,r,340,12)
(.,340,13)
(id,accept,340,14)
((,340,20)
(this,340,21)
(),340,25)
(;,340,27)
(},340,29)
(else,341,2)
(id,nti,341,7)
(=,341,11)
(num,0,341,13)
(;,341,15)
(if,343,2)
((,343,5)
(id,n,343,6)
(.,343,7)
(id,GetHas_Left,343,8)
((,343,19)
(),343,20)
(),343,21)
({,343,23)
(id,l,344,6)
(=,344,8)
(id,n,344,10)
(.,344,11)
(id,GetLeft,344,12)
((,344,19)
(),344,20)
(;,344,21)
(id,nti,345,6)
(=,345,10)
(id,l,345,12)
(.,345,13)
(id,accept,345,14)
((,345,20)
(this,345,21)
(),345,25)
(;,345,27)
(},345,29)
(else,346,2)
(id,nti,346,7)
(=,346,11)
(num,0,346,13)
(;,346,15)
(return,348,2)
(num,0,348,9)
(;,348,10)
(},349,5)
(},351,1)
(class,354,1)
(id,MyVisitor,354,7)
(extends,354,17)
(id,Visitor,354,25)
({,354,33)
(public,356,5)
(int,356,12)
(id,visit,356,16)
((,356,21)
(id,Tree,356,22)
(id,n,356,27)
(),356,28)
({,356,29)
(int,357,2)
(id,nti,357,6)
(;,357,10)
(if,359,2)
((,359,5)
(id,n,359,6)
(.,359,7)
(id,GetHas_Right,359,8)
((,359,20)
(),359,21)
(),359,22)
({,359,23)
(id,r,360,6)
(=,360,8)
(id,n,360,10)
(.,360,11)
(id,GetRight,360,12)
((,360,20)
(),360,21)
(;,360,23)
(id,nti,361,6)
(=,361,10)
(id,r,361,12)
(.,361,13)
(id,accept,361,14)
((,361,20)
(this,361,21)
(),361,25)
(;,361,27)
(},361,29)
(else,362,2)
(id,nti,362,7)
(=,362,11)
(num,0,362,13)
(;,362,15)
(System.out.println,364,2)
((,364,20)
(id,n,364,21)
(.,364,22)
(id,GetKey,364,23)
((,364,29)
(),364,30)
(),364,31)
(;,364,32)
(if,366,2)
((,366,5)
(id,n,366,6)
(.,366,7)
(id,GetHas_Left,366,8)
((,366,19)
(),366,20)
(),366,21)
({,366,23)
(id,l,367,6)
(=,367,8)
(id,n,367,10)
(.,367,11)
(id,GetLeft,367,12)
((,367,19)
(),367,20)
(;,367,21)
(id,nti,368,6)
(=,368,10)
(id,l,368,11)
(.,368,12)
(id,accept,368,13)
((,368,19)
(this,368,20)
(),368,24)
(;,368,26)
(},368,28)
(else,369,2)
(id,nti,369,7)
(=,369,11)
(num,0,369,13)
(;,369,15)
(return,371,2)
(num,0,371,9)
(;,371,10)
(},372,5)
(},374,1)
(<<EOF>>,375,1)
*/

